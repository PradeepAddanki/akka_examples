package com.tresata.akka.http.spnego;

import java.security.Key;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

import sun.misc.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.util.Base64;

public class AESFile {
    private static String algorithm = "AES";
    private static byte[] keyValue = new byte[]{'0', '2', '3', '4', '5', '6', '7', '8', '9', '1', '2', '3', '4', '5', '6', '7'};// your key
    private static final int SALT_LENGTH_BYTE = 16;

    // Performs Encryption
    public static String encrypt(String plainText) throws Exception {
       //key key = generateKey();
        Key key = getAESKeyFromPassword("chahgneit".toCharArray(), CryptoUtils.getRandomNonce(SALT_LENGTH_BYTE));
        System.out.println(key.getEncoded());
        byte[] salt = CryptoUtils.getRandomNonce(SALT_LENGTH_BYTE);
        Cipher chiper = Cipher.getInstance(algorithm);
        chiper.init(Cipher.ENCRYPT_MODE, key);
        byte[] base64decodedTokenArr = Base64.getEncoder().encode(plainText.getBytes());
        byte[] decryptedPassword = chiper.doFinal(plainText.getBytes());
        String encryptedValue = Base64.getEncoder().encodeToString(decryptedPassword);
        return encryptedValue;
    }

    // Performs decryption
    public static String decrypt(String encryptedText) throws Exception {
        // generate key
        //Key key = generateKey();
        Key key = getAESKeyFromPassword("chahgneit".toCharArray(), CryptoUtils.getRandomNonce(SALT_LENGTH_BYTE));
        System.out.println(key.getEncoded());
        Cipher chiper = Cipher.getInstance(algorithm);
        chiper.init(Cipher.DECRYPT_MODE, key);
        byte[] decordedValue = Base64.getDecoder().decode(encryptedText);
        byte[] decValue = chiper.doFinal(decordedValue);
        String decryptedValue = new String(decValue);
        return decryptedValue;
    }

    //generateKey() is used to generate a secret key for AES algorithm
    private static Key generateKey() throws Exception {
        Key key = new SecretKeySpec(keyValue, algorithm);
        return key;
    }

    // AES 256 bits secret key derived from a password
    public static SecretKey getAESKeyFromPassword(char[] password, byte[] salt)
            throws NoSuchAlgorithmException, InvalidKeySpecException {

       SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
        //SecretKeyFactory factory = SecretKeyFactory.getInstance(algorithm);
        // iterationCount = 65536
        // keyLength = 256
        KeySpec spec = new PBEKeySpec("@Q".toCharArray(), salt, 65536, 256);
        SecretKey secret = new SecretKeySpec(factory.generateSecret(spec).getEncoded(), "AES");
        return secret;

    }

    // performs encryption & decryption
    public static void main(String[] args) throws Exception {

        String text = "Hi this medfg";
        System.out.println(text);

        String plainText = text;
        String encryptedText = AESFile.encrypt(plainText);
        System.out.println(encryptedText);
        String decryptedText = AESFile.decrypt(encryptedText);
        System.out.println("Plain Text : " + plainText);
        System.out.println("Encrypted Text : " + encryptedText);
        System.out.println("Decrypted Text : " + decryptedText);
    }
}
